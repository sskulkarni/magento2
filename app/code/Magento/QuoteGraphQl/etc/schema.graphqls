# Copyright Â© Magento, Inc. All rights reserved.
# See COPYING.txt for license details.

type Query {
    cart(cart_id: String!): Cart @resolver (class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\Cart") @doc(description:"Returns information about shopping cart")
}

type Mutation {
    createEmptyCart: String @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\CreateEmptyCart") @doc(description:"Creates an empty shopping cart for a guest or logged in user")
    addSimpleProductsToCart(input: AddSimpleProductsToCartInput): AddSimpleProductsToCartOutput @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\AddSimpleProductsToCart")
    addVirtualProductsToCart(input: AddVirtualProductsToCartInput): AddVirtualProductsToCartOutput @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\AddSimpleProductsToCart")
    applyCouponToCart(input: ApplyCouponToCartInput): ApplyCouponToCartOutput @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\ApplyCouponToCart")
    removeCouponFromCart(input: RemoveCouponFromCartInput): RemoveCouponFromCartOutput @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\RemoveCouponFromCart")
    setShippingAddressesOnCart(input: SetShippingAddressesOnCartInput): SetShippingAddressesOnCartOutput @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\SetShippingAddressesOnCart")
    setBillingAddressOnCart(input: SetBillingAddressOnCartInput): SetBillingAddressOnCartOutput @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\SetBillingAddressOnCart")
    setShippingMethodsOnCart(input: SetShippingMethodsOnCartInput): SetShippingMethodsOnCartOutput @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\SetShippingMethodsOnCart")
}

input AddSimpleProductsToCartInput {
    cart_id: String!
    cartItems: [SimpleProductCartItemInput!]!
}

input SimpleProductCartItemInput {
    data: CartItemInput!
    customizable_options:[CustomizableOptionInput!]
}

input AddVirtualProductsToCartInput {
    cart_id: String!
    cartItems: [VirtualProductCartItemInput!]!
}

input VirtualProductCartItemInput {
    data: CartItemInput!
    customizable_options:[CustomizableOptionInput!]
}

input CartItemInput {
    sku: String!
    qty: Float!
}

input CustomizableOptionInput {
    id: Int!
    value: String!
}

input ApplyCouponToCartInput {
    cart_id: String!
    coupon_code: String!
}

input SetShippingAddressesOnCartInput {
    cart_id: String!
    shipping_addresses: [ShippingAddressInput!]!
}

input ShippingAddressInput {
    customer_address_id: Int # If provided then will be used address from address book
    address: CartAddressInput
    cart_items: [CartItemQuantityInput!]
}

input CartItemQuantityInput {
    cart_item_id: Int!
    quantity: Float!
}

input SetBillingAddressOnCartInput {
    cart_id: String!
    billing_address: BillingAddressInput!
}

input BillingAddressInput {
    customer_address_id: Int
    address: CartAddressInput
    use_for_shipping: Boolean
}

input CartAddressInput {
    firstname: String!
    lastname: String!
    company: String
    street: [String!]!
    city: String!
    region: String
    postcode: String
    country_code: String!
    telephone: String!
    save_in_address_book: Boolean!
}

input SetShippingMethodsOnCartInput {
    cart_id: String!
    shipping_methods: [ShippingMethodForAddressInput!]!
}

input ShippingMethodForAddressInput {
    cart_address_id: Int!
    carrier_code: String!
    method_code: String!
}

type SetBillingAddressOnCartOutput {
    cart: Cart!
}

type SetShippingAddressesOnCartOutput {
    cart: Cart!
}

type SetShippingMethodsOnCartOutput {
    cart: Cart!
}

type ApplyCouponToCartOutput {
    cart: Cart!
}

type Cart {
    cart_id: String
    items: [CartItemInterface]
    applied_coupon: AppliedCoupon
    shipping_addresses: [CartAddress]! @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\ShippingAddresses")
    billing_address: CartAddress! @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\BillingAddress")
    available_payment_methods : [PaymentMethod]  @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\AvailablePaymentMethods") @doc(description: "Available payment methods")
}

type CartAddress {
    firstname: String
    lastname: String
    company: String
    street: [String]
    city: String
    region: CartAddressRegion
    postcode: String
    country: CartAddressCountry
    telephone: String
    address_type: AdressTypeEnum
    selected_shipping_method: SelectedShippingMethod
    available_shipping_methods: [AvailableShippingMethod] @resolver(class: "\\Magento\\QuoteGraphQl\\Model\\Resolver\\ShippingAdress\\AvailableShippingMethods")
    items_weight: Float
    customer_notes: String
    cart_items: [CartItemQuantity]
}

type CartItemQuantity {
    cart_item_id: String!
    quantity: Float!
}

type CartAddressRegion {
    code: String
    label: String
}

type CartAddressCountry {
    code: String
    label: String
}

type SelectedShippingMethod {
    amount: Float!
}

type AvailableShippingMethod {
    carrier_code: String!
    carrier_title: String!
    method_code: String!
    method_title: String!
    error_message: String
    amount: Float!
    base_amount: Float!
    price_excl_tax: Float!
    price_incl_tax: Float!
}

type PaymentMethod {
    code: String @doc(description: "The payment method code")
    title: String @doc(description: "The payment method title.")
}

enum AdressTypeEnum {
    SHIPPING
    BILLING
}

type AppliedCoupon {
    code: String!
}

input RemoveCouponFromCartInput {
    cart_id: String!
}

type RemoveCouponFromCartOutput {
    cart: Cart
}

type AddSimpleProductsToCartOutput {
    cart: Cart!
}

type AddVirtualProductsToCartOutput {
    cart: Cart!
}

type SimpleCartItem implements CartItemInterface @doc(description: "Simple Cart Item") {
    customizable_options: [SelectedCustomizableOption] @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\CustomizableOptions")
}

type VirtualCartItem implements CartItemInterface @doc(description: "Virtual Cart Item") {
    customizable_options: [SelectedCustomizableOption] @resolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\CustomizableOptions")
}

interface CartItemInterface @typeResolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\CartItemTypeResolver") {
    id: String!
    qty: Float!
    product: ProductInterface!
}

type SelectedCustomizableOption {
    id: Int!
    label: String!
    type: String!
    is_required: Int!
    values: [SelectedCustomizableOptionValue!]!
    sort_order: Int!
}

type SelectedCustomizableOptionValue {
    id: Int!
    label: String!
    value: String!
    price: CartItemSelectedOptionValuePrice!
    sort_order: Int!
}

type CartItemSelectedOptionValuePrice {
    value: Float!
    units: String!
    type: PriceTypeEnum!
}
